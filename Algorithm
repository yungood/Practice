
[ 해시 알고리즘 ] (Hash Function Algorithm)

긴 길이의 데이터를 짧은 길이의 데이터로 변환하는 알고리즘.
제3 자는 짧은 길이의 데이터로부터 원래의 데이터를 복구 할 수 없어야 하며, 
동일한 출력을 갖는 서로 다른 데이터를 찾을 수 없어야 한다.


https://terms.naver.com/entry.nhn?docId=3432004&cid=58437&categoryId=58437 - 해시의 역할(네이버 지식백과)

https://nine01223.blog.me/221585337214 - 해시 알고리즘이란?(네이버 블로그 참고)

https://blog.naver.com/and_lamyland/221375104210 - 해시 자료구조(네이버 블로그 참고)

https://blog.naver.com/junimnje/221259616981 - 해시 테이블 구현(네이버 블로그 참고)

https://bunggl.blog.me/221401535065 - 해시 테이블(네이버 블로그  참고)

https://blog.naver.com/whdgml1996/221436269529 - 해싱/해시 테이블(네이버 블로그 참고)


★ 해시 알고리즘(자료구조)는 데이터를 효율적으로 관리하기 위해 사용!!!!!!! -> 데이터를 저장하여 효율적으로 관리하기 위해
★ 해이테이블을 구현할때 무!조!건! 주의해야할점 : 해시테이블은 무조건 'Key'와 ' Value' 쌍으로 이루어진다.


[ 정렬 알고리즘 ] (sorting)

https://supergrammer.blog.me/221267431320 - 정렬의 필요성, 시간복잡도 함수
https://blog.naver.com/joohan0224/221532811385 - 선택정렬, 삽입정렬
https://blog.naver.com/mk002060/221138000761 - 전위 후위 증감연산자
https://blog.naver.com/kwmme/221625576284 - swap()
https://blog.naver.com/hbom20/221372539546 - 이



[완전 탐색 알고리즘] (= 브루트 포스 알고리즘) 

https://blog.naver.com/tnqls1286/221691290223 - 완전 탐색 알고리즘
https://blog.naver.com/ckgudwlscjsw/221594646422 - 완전 탐색 알고리즘
https://blog.naver.com/kss9409/221607901547 - 완전 탐색 알고리즘
https://blog.naver.com/zenons1201/221619552040 - 완전 탐색 알고리즘
https://kks227.blog.me/220769870195 - 완전 탐색 알고리즘
https://blog.naver.com/pyw0564/221503780953 - 완전 탐색 & 백트래킹
https://blog.naver.com/kimseok1116/221519910394 - 백트래킹
https://blog.naver.com/sdfzl_ar/220098583352 - 백트래킹 & 재귀함수
https://blog.naver.com/rk9034/221277353529 - 순열 & 조합


[String Library]

https://blog.naver.com/jhnyang/221506584628 - String library
https://blog.naver.com/sochun1518/221465260287  -String library
https://shovelman.tistory.com/424 - find()함수
https://modoocode.com/241 - find()

[깊이/너비 우선 탐색](DFS/BFS)

https://jeongw00.tistory.com/303 - 미로 출구 
https://blog.naver.com/ds020228/221482072001 - 너비 우선 탐색(큐로 구현)

 //*
 
 < a배열 이미지 >
 
 a배열의 자료형은 int가 아니라 vector<int>이므로 한 인덱스 안에 여러개의 데이터를 저장할 수 있다.
 
인덱스   -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |

배열원소 -> X | 2 | 1 | 1 | 2 | 2 | 3 | 3 |
배열원소 -> X | 3 | 3 | 2 | 2 |   | 7 | 6 |
배열원소 -> X |   | 4 | 6 |   |   |   |   |
배열원소 -> X |   | 5 | 7 |   |   |   |   |
배열원소 -> X |   | 4 |   |   |   |   |   |
          
 #include <iostream>
 #include <queue>
 #include <vector>   

 using namespace std;

 int c[7];
 vector<int> a[8];

 int main(void)
 {
  a[1].push_back(2);
  a[2].push_back(1);

  a[1].push_back(3);
  a[3].push_back(1);

  a[2].push_back(3);
  a[3].push_back(2);

  a[2].push_back(4);
  a[4].push_back(2);

  a[2].push_back(5);
  a[5].push_back(2);

  a[3].push_back(6);
  a[6].push_back(3);

  a[3].push_back(7);
  a[7].push_back(3);

  a[4].push_back(2);
  a[2].push_back(4);

  a[6].push_back(7);
  a[7].push_back(6);

  // a 배열 출력하는 방법
  for (int i = 0; i < 8; i++)
  {
   for (int j = 0; j < a[i].size(); j++)     
   {
    cout << a[i][j] << " ";     => 출력 : 2 3 1 3 4 5 4 1 2 6 7 2 2 2 3 7 3 6
   }
  }

  return 0;
 }
*//

https://m.blog.naver.com/PostView.nhn?blogId=ndb796&logNo=221230945092&proxyReferer=https%3A%2F%2Fwww.google.com%2F - 깊이/너비
https://blog.naver.com/krenerd77/221269291004 - 큐 함수 설명
 - https://blog.naver.com/rile1036/221668876170 - 벡터
 - https://blog.naver.com/sjhn6371/221674215426 - 벡터
 - https://goluckvv.blog.me/221594201809 - 벡터
 - https://sunnyholic.com/93?category=502076 - 벡터
 - https://blog.naver.com/qls0147/221375016667 - 벡터(vector<int> a() 와 vector<int> a[]의 차이)
 - vector<int> a(10); -> 기본 벡터 사용법, 크기가 10인 int 배열
   vector<vector<int>> a; -> int 벡터가 들어가 있는 벡터
   vector<int> a[10]; 크기가 10인 vector<int>의 배열
https://blog.naver.com/dhsin0468/221681986723 - 큐, 스택으로 구현   
   
