/*

출제 : 프로그래머스 - 완전탐색 - 모의고사

풀이 >

수포자 1 찍기 규칙 : 1 | 2 | 3 | 4 | 5 | (반복)
수포자 2 찍기 규칙 : 2 | 1 | 3 | 3 | 2 | 4 | 2 | 5 | (반복)
수포자 3 찍기 규칙 : 3 | 3 | 1 | 1 | 2 | 2 | 4 | 4 | 5 | 5 | (반복)

*/

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> solution(vector<int> answers) {
    vector<int> answer; // 가장 많은 문제를 푼 수포자 return
    
    // 수포자1, 2, 3 찍기 규칙
    int first[5] = {1,2,3,4,5};
    int second[8] = {2,1,2,3,2,4,2,5};
    int third[10] = {3,3,1,1,2,2,4,4,5,5};
    int f = 0, s = 0, t = 0; // 수포자 1,2,3 배열 인덱스 증가
    
    int count[3] = {0}; // 수포자 1,2,3의 푼 문제 수 확인하기
    
    int max = 0; // 푼 문제 수 중 가장 높은 값
    
    // answers 배열과 수포자들의 찍기 규칙 배열 비교하여 맞은 문제는 해당하는 수포자 count 값 증가
    for(int i = 0; i < answers.size(); i++) // answers배열만큼 for 문 돌기
    {
        // 수포자 1
        if(answers[i] == first[f]){ count[0]++; }
        
        if(f == 4) { f = 0; } // 찍기 규칙이 반복되므로 
        else{ f++; }
      
        // 수포자 2
        if(answers[i] == second[s] ){ count[1]++; }
        
        if(s == 7) { s = 0; } // 찍기 규칙이 반복되므로 
        else{ s++; } 
        
        // 수포자 3
        if(answers[i] == third[t] ){ count[2]++; }
            
        if(t == 9) { t = 0; } // 찍기 규칙이 반복되므로 
        else{ t++; }        
    }
   
    if(count[0] == 0 && count[1] == 0 && count[2] == 0) answer.push_back(0); // 수포자 모두 한 문제도 못 풀었으면
    else // 한 문제라도 풀었으면
    {
        for(int i = 0; i < 3; i++)
        {
            if(max < count[i]) max = count[i]; // 수포자들이 푼 문제들 중 가장 많은 개수 찾기
        }
        
        for(int i = 0; i < 3; i++)
        {
            if(max == count[i]) answer.push_back(i+1); // max와 같은 값이 있으면 가장 많은 문제를 풀었다는 것이므로 answer에 집어넣기
        }
    }
    
    sort(answer.begin(),answer.end()); // 오름차순으로 정렬(근데 굳이 할 필요는 없을듯, 어차피 인덱스 0부터 순회하여 비교하므로)
    
    return answer;
}


/*

*** 같은 풀이 : 더 깔끔한 방식

#include<string>
#include<vector>
#include<algorithm>

using namespace std;

vector<int> one = {1,2,3,4,5};
vector<int> two = {2,1,2,3,2,4,2,5};
vector<int> thr = {3,3,1,1,2,2,,4,4,5,5};

vector<int> solution(vector<int> answers){
    vector<int> answer;
    vector<int> they(3);
    
    for(int i=0; i<answers.size(); i++)
    {
        if(answers[i] == one[i%one.size()] they[0]++;
        if(answers[i] == two[i%two.size()] they[1]++;
        if(answers[i] == thr[i%thr.size()] they[2]++;
     }
     int they_max = *max_element(they.begin(), they.end());
     
     for(int i = 0; i < 3; i++)
     {
        if(they[i] == they_max) answer.push_back(i+1);
     }
     
     return answer;
 }

*/

// https://blog.naver.com/skrdnjs0420/221629342816 - 배열 길이 구하기
